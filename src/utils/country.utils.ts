import axios from 'axios';
import sharp from 'sharp';
import fs from 'fs/promises';
import path from 'path';

const IMAGE_PATH = path.join(process.cwd(), 'cache', 'summary.png');
const TMP_IMAGE_PATH = path.join('/tmp', 'country-api-summary.png');
const WIDTH = 1200;
const HEIGHT = 600;

function currencyFormatted(num: number | null | undefined): string {
    if (num === null || num === undefined) return 'N/A';
    return Number(num).toLocaleString(undefined, { maximumFractionDigits: 2 });
}

function escapeHtml(unsafe: string): string {
    return String(unsafe).replace(/[&<>"']/g, function (m) {
        return (
            {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;',
            } as Record<string, string>
        )[m];
    });
}

export const fetchCountries = async () => {
    try {
        const response = await axios.get(
            'https://restcountries.com/v2/all?fields=name,capital,region,population,flag,currencies',
            { timeout: 5000 }
        );
        return response.data;
    } catch (error) {
        console.error('Error fetching countries:', error);
        return null;
    }
};

export const fetchExchangeRates = async () => {
    try {
        const response = await axios.get(
            'https://open.er-api.com/v6/latest/USD',
            { timeout: 5000 }
        );
        return response.data.rates;
    } catch (error) {
        console.error('Error fetching exchange rates:', error);
        return null;
    }
};

export const generateSummaryImage = async (
    totalCountries: number,
    top5Gdp: any[],
    lastRefreshed: Date
) => {
    const topList = top5Gdp
        .map((t, i) => {
            return `<tspan x="40" dy="${i === 0 ? 0 : 1.4}em">${i + 1}. ${escapeHtml(t.name)} — ${currencyFormatted(t.estimated_gdp)}</tspan>`;
        })
        .join('');

    const last = lastRefreshed.toISOString();

    const svg = `
    <svg width="${WIDTH}" height="${HEIGHT}" xmlns="http://www.w3.org/2000/svg">
        <style>
        .title { font-family: sans-serif; font-size: 36px; font-weight: bold; fill: #222; }
        .meta { font-family: sans-serif; font-size: 18px; fill: #444; }
        .list { font-family: sans-serif; font-size: 22px; fill: #111; }
        rect { fill: #f7f7f8; }
        </style>
        <rect width="100%" height="100%" rx="12" />
        <text x="40" y="70" class="title">Country Summary</text>
        <text x="40" y="110" class="meta">Total countries: ${totalCountries}</text>
        <text x="40" y="140" class="meta">Last refreshed: ${escapeHtml(last)}</text>

        <text x="40" y="190" class="list">
        ${topList || '<tspan x="0">No GDP data available</tspan>'}
        </text>

        <text x="${WIDTH - 40}" y="${HEIGHT - 40}" class="meta" text-anchor="end">Generated by Country API</text>
    </svg>`;

    // Convert SVG to PNG with sharp
    const svgBuffer = Buffer.from(svg);
    const pngBuffer = await sharp(svgBuffer).resize(WIDTH, HEIGHT).png().toBuffer();

    // Try to save to cache directory first, fallback to /tmp
    try {
        const dir = path.dirname(IMAGE_PATH);
        await fs.mkdir(dir, { recursive: true });
        await fs.writeFile(IMAGE_PATH, pngBuffer);
        console.log('✅ Image saved to cache directory');
    } catch (cacheError) {
        console.warn('⚠️  Cache directory not writable, using /tmp:', cacheError instanceof Error ? cacheError.message : String(cacheError));
        try {
            await fs.writeFile(TMP_IMAGE_PATH, pngBuffer);
            console.log('✅ Image saved to /tmp directory');
        } catch (tmpError) {
            console.error('❌ Could not save image to any location:', tmpError instanceof Error ? tmpError.message : String(tmpError));
            throw new Error('Image generation failed: No writable location available');
        }
    }
};
